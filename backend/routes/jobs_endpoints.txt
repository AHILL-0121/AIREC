@router.put("/{job_id}")
async def update_job(
    job_id: str,
    job_data: JobCreate,
    current_user: dict = Depends(get_current_user)
):
    """Update an existing job posting"""
    if current_user["role"] != "recruiter":
        raise HTTPException(status_code=403, detail="Only recruiters can update jobs")
    
    db = get_database()
    
    # Find the job
    job = await db.jobs.find_one({"id": job_id})
    
    # If not found by id, try _id (if valid ObjectId)
    if not job:
        try:
            from bson.objectid import ObjectId
            if ObjectId.is_valid(job_id):
                job = await db.jobs.find_one({"_id": ObjectId(job_id)})
        except ImportError:
            pass
    
    if not job:
        raise HTTPException(status_code=404, detail="Job not found")
    
    # Verify ownership
    if job["posted_by"] != current_user["id"]:
        raise HTTPException(status_code=403, detail="You can only update your own job postings")
    
    # Update job data
    update_data = {
        "title": job_data.title,
        "company": job_data.company,
        "description": job_data.description,
        "required_skills": job_data.required_skills,
        "preferred_skills": job_data.preferred_skills,
        "location": job_data.location,
        "min_experience": job_data.min_experience,
        "max_experience": job_data.max_experience,
        "salary_min": job_data.salary_min,
        "salary_max": job_data.salary_max,
        "job_type": job_data.job_type,
    }
    
    # Use correct ID field for update
    filter_query = {"id": job_id} if "id" in job else {"_id": job["_id"]}
    
    # Update the document
    await db.jobs.update_one(filter_query, {"$set": update_data})
    
    # Get updated job
    updated_job = await db.jobs.find_one(filter_query)
    
    # Format for response
    updated_job["id"] = str(updated_job.get("_id", updated_job.get("id", "")))
    if "_id" in updated_job:
        del updated_job["_id"]
    updated_job["posted_by"] = str(updated_job["posted_by"])
    
    return {
        "success": True,
        "data": updated_job
    }

@router.delete("/{job_id}")
async def delete_job(
    job_id: str,
    current_user: dict = Depends(get_current_user)
):
    """Delete a job posting"""
    if current_user["role"] != "recruiter":
        raise HTTPException(status_code=403, detail="Only recruiters can delete jobs")
    
    db = get_database()
    
    # Find the job
    job = await db.jobs.find_one({"id": job_id})
    
    # If not found by id, try _id (if valid ObjectId)
    if not job:
        try:
            from bson.objectid import ObjectId
            if ObjectId.is_valid(job_id):
                job = await db.jobs.find_one({"_id": ObjectId(job_id)})
        except ImportError:
            pass
    
    if not job:
        raise HTTPException(status_code=404, detail="Job not found")
    
    # Verify ownership
    if job["posted_by"] != current_user["id"]:
        raise HTTPException(status_code=403, detail="You can only delete your own job postings")
    
    # Use correct ID field for deletion
    filter_query = {"id": job_id} if "id" in job else {"_id": job["_id"]}
    
    # Delete the job
    await db.jobs.delete_one(filter_query)
    
    return {
        "success": True,
        "message": "Job deleted successfully"
    }